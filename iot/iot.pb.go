// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iot.proto

package iot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Device struct {
	DeviceName           string   `protobuf:"bytes,1,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	ProductKey           string   `protobuf:"bytes,2,opt,name=ProductKey,proto3" json:"ProductKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{0}
}
func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (dst *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(dst, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *Device) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

type DeviceInfo struct {
	DeviceId             string   `protobuf:"bytes,1,opt,name=DeviceId,proto3" json:"DeviceId,omitempty"`
	DeviceName           string   `protobuf:"bytes,2,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	DeviceSecret         string   `protobuf:"bytes,3,opt,name=DeviceSecret,proto3" json:"DeviceSecret,omitempty"`
	GmtCreate            string   `protobuf:"bytes,4,opt,name=GmtCreate,proto3" json:"GmtCreate,omitempty"`
	GmtModified          string   `protobuf:"bytes,5,opt,name=GmtModified,proto3" json:"GmtModified,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceInfo) Reset()         { *m = DeviceInfo{} }
func (m *DeviceInfo) String() string { return proto.CompactTextString(m) }
func (*DeviceInfo) ProtoMessage()    {}
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{1}
}
func (m *DeviceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceInfo.Unmarshal(m, b)
}
func (m *DeviceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceInfo.Marshal(b, m, deterministic)
}
func (dst *DeviceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInfo.Merge(dst, src)
}
func (m *DeviceInfo) XXX_Size() int {
	return xxx_messageInfo_DeviceInfo.Size(m)
}
func (m *DeviceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInfo proto.InternalMessageInfo

func (m *DeviceInfo) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceInfo) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *DeviceInfo) GetDeviceSecret() string {
	if m != nil {
		return m.DeviceSecret
	}
	return ""
}

func (m *DeviceInfo) GetGmtCreate() string {
	if m != nil {
		return m.GmtCreate
	}
	return ""
}

func (m *DeviceInfo) GetGmtModified() string {
	if m != nil {
		return m.GmtModified
	}
	return ""
}

type BatchDeviceInfo struct {
	ProductKey           string   `protobuf:"bytes,1,opt,name=ProductKey,proto3" json:"ProductKey,omitempty"`
	DeviceName           []string `protobuf:"bytes,2,rep,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchDeviceInfo) Reset()         { *m = BatchDeviceInfo{} }
func (m *BatchDeviceInfo) String() string { return proto.CompactTextString(m) }
func (*BatchDeviceInfo) ProtoMessage()    {}
func (*BatchDeviceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{2}
}
func (m *BatchDeviceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchDeviceInfo.Unmarshal(m, b)
}
func (m *BatchDeviceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchDeviceInfo.Marshal(b, m, deterministic)
}
func (dst *BatchDeviceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDeviceInfo.Merge(dst, src)
}
func (m *BatchDeviceInfo) XXX_Size() int {
	return xxx_messageInfo_BatchDeviceInfo.Size(m)
}
func (m *BatchDeviceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDeviceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDeviceInfo proto.InternalMessageInfo

func (m *BatchDeviceInfo) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

func (m *BatchDeviceInfo) GetDeviceName() []string {
	if m != nil {
		return m.DeviceName
	}
	return nil
}

type GetRequest struct {
	ProductKey           string   `protobuf:"bytes,1,opt,name=ProductKey,proto3" json:"ProductKey,omitempty"`
	PageSize             string   `protobuf:"bytes,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	CurrentPage          string   `protobuf:"bytes,3,opt,name=CurrentPage,proto3" json:"CurrentPage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{3}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (dst *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(dst, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

func (m *GetRequest) GetPageSize() string {
	if m != nil {
		return m.PageSize
	}
	return ""
}

func (m *GetRequest) GetCurrentPage() string {
	if m != nil {
		return m.CurrentPage
	}
	return ""
}

type BatchRegisterRequest struct {
	ProductKey           string   `protobuf:"bytes,1,opt,name=ProductKey,proto3" json:"ProductKey,omitempty"`
	ApplyId              string   `protobuf:"bytes,2,opt,name=ApplyId,proto3" json:"ApplyId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchRegisterRequest) Reset()         { *m = BatchRegisterRequest{} }
func (m *BatchRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*BatchRegisterRequest) ProtoMessage()    {}
func (*BatchRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{4}
}
func (m *BatchRegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchRegisterRequest.Unmarshal(m, b)
}
func (m *BatchRegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchRegisterRequest.Marshal(b, m, deterministic)
}
func (dst *BatchRegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRegisterRequest.Merge(dst, src)
}
func (m *BatchRegisterRequest) XXX_Size() int {
	return xxx_messageInfo_BatchRegisterRequest.Size(m)
}
func (m *BatchRegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRegisterRequest proto.InternalMessageInfo

func (m *BatchRegisterRequest) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

func (m *BatchRegisterRequest) GetApplyId() string {
	if m != nil {
		return m.ApplyId
	}
	return ""
}

type PubRequest struct {
	ProductKey           string   `protobuf:"bytes,1,opt,name=ProductKey,proto3" json:"ProductKey,omitempty"`
	TopicFullName        string   `protobuf:"bytes,2,opt,name=TopicFullName,proto3" json:"TopicFullName,omitempty"`
	MessageContent       string   `protobuf:"bytes,3,opt,name=MessageContent,proto3" json:"MessageContent,omitempty"`
	Qos                  string   `protobuf:"bytes,4,opt,name=Qos,proto3" json:"Qos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubRequest) Reset()         { *m = PubRequest{} }
func (m *PubRequest) String() string { return proto.CompactTextString(m) }
func (*PubRequest) ProtoMessage()    {}
func (*PubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{5}
}
func (m *PubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubRequest.Unmarshal(m, b)
}
func (m *PubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubRequest.Marshal(b, m, deterministic)
}
func (dst *PubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubRequest.Merge(dst, src)
}
func (m *PubRequest) XXX_Size() int {
	return xxx_messageInfo_PubRequest.Size(m)
}
func (m *PubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PubRequest proto.InternalMessageInfo

func (m *PubRequest) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

func (m *PubRequest) GetTopicFullName() string {
	if m != nil {
		return m.TopicFullName
	}
	return ""
}

func (m *PubRequest) GetMessageContent() string {
	if m != nil {
		return m.MessageContent
	}
	return ""
}

func (m *PubRequest) GetQos() string {
	if m != nil {
		return m.Qos
	}
	return ""
}

type QueryPageRequest struct {
	ApplyId              string   `protobuf:"bytes,1,opt,name=ApplyId,proto3" json:"ApplyId,omitempty"`
	PageSize             string   `protobuf:"bytes,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	CurrentPage          string   `protobuf:"bytes,3,opt,name=CurrentPage,proto3" json:"CurrentPage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryPageRequest) Reset()         { *m = QueryPageRequest{} }
func (m *QueryPageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPageRequest) ProtoMessage()    {}
func (*QueryPageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{6}
}
func (m *QueryPageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryPageRequest.Unmarshal(m, b)
}
func (m *QueryPageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryPageRequest.Marshal(b, m, deterministic)
}
func (dst *QueryPageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPageRequest.Merge(dst, src)
}
func (m *QueryPageRequest) XXX_Size() int {
	return xxx_messageInfo_QueryPageRequest.Size(m)
}
func (m *QueryPageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPageRequest proto.InternalMessageInfo

func (m *QueryPageRequest) GetApplyId() string {
	if m != nil {
		return m.ApplyId
	}
	return ""
}

func (m *QueryPageRequest) GetPageSize() string {
	if m != nil {
		return m.PageSize
	}
	return ""
}

func (m *QueryPageRequest) GetCurrentPage() string {
	if m != nil {
		return m.CurrentPage
	}
	return ""
}

type ApplyData struct {
	ApplyId              uint64   `protobuf:"varint,1,opt,name=ApplyId,proto3" json:"ApplyId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyData) Reset()         { *m = ApplyData{} }
func (m *ApplyData) String() string { return proto.CompactTextString(m) }
func (*ApplyData) ProtoMessage()    {}
func (*ApplyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{7}
}
func (m *ApplyData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplyData.Unmarshal(m, b)
}
func (m *ApplyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplyData.Marshal(b, m, deterministic)
}
func (dst *ApplyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyData.Merge(dst, src)
}
func (m *ApplyData) XXX_Size() int {
	return xxx_messageInfo_ApplyData.Size(m)
}
func (m *ApplyData) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyData.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyData proto.InternalMessageInfo

func (m *ApplyData) GetApplyId() uint64 {
	if m != nil {
		return m.ApplyId
	}
	return 0
}

type Data struct {
	DeviceId             string   `protobuf:"bytes,1,opt,name=DeviceId,proto3" json:"DeviceId,omitempty"`
	DeviceName           string   `protobuf:"bytes,2,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	DeviceSecret         string   `protobuf:"bytes,3,opt,name=DeviceSecret,proto3" json:"DeviceSecret,omitempty"`
	GmtCreate            string   `protobuf:"bytes,4,opt,name=GmtCreate,proto3" json:"GmtCreate,omitempty"`
	GmtModified          string   `protobuf:"bytes,5,opt,name=GmtModified,proto3" json:"GmtModified,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{8}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (dst *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(dst, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *Data) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *Data) GetDeviceSecret() string {
	if m != nil {
		return m.DeviceSecret
	}
	return ""
}

func (m *Data) GetGmtCreate() string {
	if m != nil {
		return m.GmtCreate
	}
	return ""
}

func (m *Data) GetGmtModified() string {
	if m != nil {
		return m.GmtModified
	}
	return ""
}

type GetSingleDeviceStatusReply struct {
	Data                 *DeviceStatusInfo `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetSingleDeviceStatusReply) Reset()         { *m = GetSingleDeviceStatusReply{} }
func (m *GetSingleDeviceStatusReply) String() string { return proto.CompactTextString(m) }
func (*GetSingleDeviceStatusReply) ProtoMessage()    {}
func (*GetSingleDeviceStatusReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{9}
}
func (m *GetSingleDeviceStatusReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSingleDeviceStatusReply.Unmarshal(m, b)
}
func (m *GetSingleDeviceStatusReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSingleDeviceStatusReply.Marshal(b, m, deterministic)
}
func (dst *GetSingleDeviceStatusReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSingleDeviceStatusReply.Merge(dst, src)
}
func (m *GetSingleDeviceStatusReply) XXX_Size() int {
	return xxx_messageInfo_GetSingleDeviceStatusReply.Size(m)
}
func (m *GetSingleDeviceStatusReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSingleDeviceStatusReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetSingleDeviceStatusReply proto.InternalMessageInfo

func (m *GetSingleDeviceStatusReply) GetData() *DeviceStatusInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeviceStatusInfo struct {
	Status               string   `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceStatusInfo) Reset()         { *m = DeviceStatusInfo{} }
func (m *DeviceStatusInfo) String() string { return proto.CompactTextString(m) }
func (*DeviceStatusInfo) ProtoMessage()    {}
func (*DeviceStatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{10}
}
func (m *DeviceStatusInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceStatusInfo.Unmarshal(m, b)
}
func (m *DeviceStatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceStatusInfo.Marshal(b, m, deterministic)
}
func (dst *DeviceStatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceStatusInfo.Merge(dst, src)
}
func (m *DeviceStatusInfo) XXX_Size() int {
	return xxx_messageInfo_DeviceStatusInfo.Size(m)
}
func (m *DeviceStatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceStatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceStatusInfo proto.InternalMessageInfo

func (m *DeviceStatusInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ApplyDeviceInfo struct {
	DeviceId             string   `protobuf:"bytes,1,opt,name=DeviceId,proto3" json:"DeviceId,omitempty"`
	DeviceName           string   `protobuf:"bytes,2,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	DeviceSecret         string   `protobuf:"bytes,3,opt,name=DeviceSecret,proto3" json:"DeviceSecret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyDeviceInfo) Reset()         { *m = ApplyDeviceInfo{} }
func (m *ApplyDeviceInfo) String() string { return proto.CompactTextString(m) }
func (*ApplyDeviceInfo) ProtoMessage()    {}
func (*ApplyDeviceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{11}
}
func (m *ApplyDeviceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplyDeviceInfo.Unmarshal(m, b)
}
func (m *ApplyDeviceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplyDeviceInfo.Marshal(b, m, deterministic)
}
func (dst *ApplyDeviceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyDeviceInfo.Merge(dst, src)
}
func (m *ApplyDeviceInfo) XXX_Size() int {
	return xxx_messageInfo_ApplyDeviceInfo.Size(m)
}
func (m *ApplyDeviceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyDeviceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyDeviceInfo proto.InternalMessageInfo

func (m *ApplyDeviceInfo) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *ApplyDeviceInfo) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *ApplyDeviceInfo) GetDeviceSecret() string {
	if m != nil {
		return m.DeviceSecret
	}
	return ""
}

type DeviceStatus struct {
	DeviceName           string   `protobuf:"bytes,1,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	Status               string   `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceStatus) Reset()         { *m = DeviceStatus{} }
func (m *DeviceStatus) String() string { return proto.CompactTextString(m) }
func (*DeviceStatus) ProtoMessage()    {}
func (*DeviceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{12}
}
func (m *DeviceStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceStatus.Unmarshal(m, b)
}
func (m *DeviceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceStatus.Marshal(b, m, deterministic)
}
func (dst *DeviceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceStatus.Merge(dst, src)
}
func (m *DeviceStatus) XXX_Size() int {
	return xxx_messageInfo_DeviceStatus.Size(m)
}
func (m *DeviceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceStatus proto.InternalMessageInfo

func (m *DeviceStatus) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *DeviceStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetReply struct {
	PageCount            uint32        `protobuf:"varint,1,opt,name=PageCount,proto3" json:"PageCount,omitempty"`
	PageSize             uint32        `protobuf:"varint,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	Page                 uint32        `protobuf:"varint,3,opt,name=Page,proto3" json:"Page,omitempty"`
	Total                uint32        `protobuf:"varint,4,opt,name=Total,proto3" json:"Total,omitempty"`
	Data                 []*DeviceInfo `protobuf:"bytes,5,rep,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetReply) Reset()         { *m = GetReply{} }
func (m *GetReply) String() string { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()    {}
func (*GetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{13}
}
func (m *GetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReply.Unmarshal(m, b)
}
func (m *GetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReply.Marshal(b, m, deterministic)
}
func (dst *GetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReply.Merge(dst, src)
}
func (m *GetReply) XXX_Size() int {
	return xxx_messageInfo_GetReply.Size(m)
}
func (m *GetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetReply proto.InternalMessageInfo

func (m *GetReply) GetPageCount() uint32 {
	if m != nil {
		return m.PageCount
	}
	return 0
}

func (m *GetReply) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *GetReply) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetReply) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GetReply) GetData() []*DeviceInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type BatchRegisterReply struct {
	Data                 *ApplyData `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BatchRegisterReply) Reset()         { *m = BatchRegisterReply{} }
func (m *BatchRegisterReply) String() string { return proto.CompactTextString(m) }
func (*BatchRegisterReply) ProtoMessage()    {}
func (*BatchRegisterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{14}
}
func (m *BatchRegisterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchRegisterReply.Unmarshal(m, b)
}
func (m *BatchRegisterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchRegisterReply.Marshal(b, m, deterministic)
}
func (dst *BatchRegisterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRegisterReply.Merge(dst, src)
}
func (m *BatchRegisterReply) XXX_Size() int {
	return xxx_messageInfo_BatchRegisterReply.Size(m)
}
func (m *BatchRegisterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRegisterReply.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRegisterReply proto.InternalMessageInfo

func (m *BatchRegisterReply) GetData() *ApplyData {
	if m != nil {
		return m.Data
	}
	return nil
}

type PubReply struct {
	MessageId            string   `protobuf:"bytes,1,opt,name=MessageId,proto3" json:"MessageId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubReply) Reset()         { *m = PubReply{} }
func (m *PubReply) String() string { return proto.CompactTextString(m) }
func (*PubReply) ProtoMessage()    {}
func (*PubReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{15}
}
func (m *PubReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubReply.Unmarshal(m, b)
}
func (m *PubReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubReply.Marshal(b, m, deterministic)
}
func (dst *PubReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubReply.Merge(dst, src)
}
func (m *PubReply) XXX_Size() int {
	return xxx_messageInfo_PubReply.Size(m)
}
func (m *PubReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PubReply.DiscardUnknown(m)
}

var xxx_messageInfo_PubReply proto.InternalMessageInfo

func (m *PubReply) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

type GetDeviceStatusReply struct {
	DeviceStatusList     []*DeviceStatus `protobuf:"bytes,1,rep,name=DeviceStatusList,proto3" json:"DeviceStatusList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetDeviceStatusReply) Reset()         { *m = GetDeviceStatusReply{} }
func (m *GetDeviceStatusReply) String() string { return proto.CompactTextString(m) }
func (*GetDeviceStatusReply) ProtoMessage()    {}
func (*GetDeviceStatusReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{16}
}
func (m *GetDeviceStatusReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeviceStatusReply.Unmarshal(m, b)
}
func (m *GetDeviceStatusReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeviceStatusReply.Marshal(b, m, deterministic)
}
func (dst *GetDeviceStatusReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceStatusReply.Merge(dst, src)
}
func (m *GetDeviceStatusReply) XXX_Size() int {
	return xxx_messageInfo_GetDeviceStatusReply.Size(m)
}
func (m *GetDeviceStatusReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceStatusReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceStatusReply proto.InternalMessageInfo

func (m *GetDeviceStatusReply) GetDeviceStatusList() []*DeviceStatus {
	if m != nil {
		return m.DeviceStatusList
	}
	return nil
}

type QueryPageReply struct {
	PageCount            uint32             `protobuf:"varint,1,opt,name=PageCount,proto3" json:"PageCount,omitempty"`
	PageSize             uint32             `protobuf:"varint,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	Page                 uint32             `protobuf:"varint,3,opt,name=Page,proto3" json:"Page,omitempty"`
	Total                uint32             `protobuf:"varint,4,opt,name=Total,proto3" json:"Total,omitempty"`
	ApplyDeviceList      []*ApplyDeviceInfo `protobuf:"bytes,5,rep,name=ApplyDeviceList,proto3" json:"ApplyDeviceList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *QueryPageReply) Reset()         { *m = QueryPageReply{} }
func (m *QueryPageReply) String() string { return proto.CompactTextString(m) }
func (*QueryPageReply) ProtoMessage()    {}
func (*QueryPageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{17}
}
func (m *QueryPageReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryPageReply.Unmarshal(m, b)
}
func (m *QueryPageReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryPageReply.Marshal(b, m, deterministic)
}
func (dst *QueryPageReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPageReply.Merge(dst, src)
}
func (m *QueryPageReply) XXX_Size() int {
	return xxx_messageInfo_QueryPageReply.Size(m)
}
func (m *QueryPageReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPageReply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPageReply proto.InternalMessageInfo

func (m *QueryPageReply) GetPageCount() uint32 {
	if m != nil {
		return m.PageCount
	}
	return 0
}

func (m *QueryPageReply) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *QueryPageReply) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryPageReply) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *QueryPageReply) GetApplyDeviceList() []*ApplyDeviceInfo {
	if m != nil {
		return m.ApplyDeviceList
	}
	return nil
}

type QueryDeviceReply struct {
	Data                 *Data    `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryDeviceReply) Reset()         { *m = QueryDeviceReply{} }
func (m *QueryDeviceReply) String() string { return proto.CompactTextString(m) }
func (*QueryDeviceReply) ProtoMessage()    {}
func (*QueryDeviceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{18}
}
func (m *QueryDeviceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryDeviceReply.Unmarshal(m, b)
}
func (m *QueryDeviceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryDeviceReply.Marshal(b, m, deterministic)
}
func (dst *QueryDeviceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeviceReply.Merge(dst, src)
}
func (m *QueryDeviceReply) XXX_Size() int {
	return xxx_messageInfo_QueryDeviceReply.Size(m)
}
func (m *QueryDeviceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeviceReply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeviceReply proto.InternalMessageInfo

func (m *QueryDeviceReply) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type NullReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NullReply) Reset()         { *m = NullReply{} }
func (m *NullReply) String() string { return proto.CompactTextString(m) }
func (*NullReply) ProtoMessage()    {}
func (*NullReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_iot_e65ab8f8cdb7b9d3, []int{19}
}
func (m *NullReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NullReply.Unmarshal(m, b)
}
func (m *NullReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NullReply.Marshal(b, m, deterministic)
}
func (dst *NullReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullReply.Merge(dst, src)
}
func (m *NullReply) XXX_Size() int {
	return xxx_messageInfo_NullReply.Size(m)
}
func (m *NullReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NullReply.DiscardUnknown(m)
}

var xxx_messageInfo_NullReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Device)(nil), "iot.Device")
	proto.RegisterType((*DeviceInfo)(nil), "iot.DeviceInfo")
	proto.RegisterType((*BatchDeviceInfo)(nil), "iot.BatchDeviceInfo")
	proto.RegisterType((*GetRequest)(nil), "iot.GetRequest")
	proto.RegisterType((*BatchRegisterRequest)(nil), "iot.BatchRegisterRequest")
	proto.RegisterType((*PubRequest)(nil), "iot.PubRequest")
	proto.RegisterType((*QueryPageRequest)(nil), "iot.QueryPageRequest")
	proto.RegisterType((*ApplyData)(nil), "iot.ApplyData")
	proto.RegisterType((*Data)(nil), "iot.Data")
	proto.RegisterType((*GetSingleDeviceStatusReply)(nil), "iot.GetSingleDeviceStatusReply")
	proto.RegisterType((*DeviceStatusInfo)(nil), "iot.DeviceStatusInfo")
	proto.RegisterType((*ApplyDeviceInfo)(nil), "iot.ApplyDeviceInfo")
	proto.RegisterType((*DeviceStatus)(nil), "iot.DeviceStatus")
	proto.RegisterType((*GetReply)(nil), "iot.GetReply")
	proto.RegisterType((*BatchRegisterReply)(nil), "iot.BatchRegisterReply")
	proto.RegisterType((*PubReply)(nil), "iot.PubReply")
	proto.RegisterType((*GetDeviceStatusReply)(nil), "iot.GetDeviceStatusReply")
	proto.RegisterType((*QueryPageReply)(nil), "iot.QueryPageReply")
	proto.RegisterType((*QueryDeviceReply)(nil), "iot.QueryDeviceReply")
	proto.RegisterType((*NullReply)(nil), "iot.NullReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IOTClient is the client API for IOT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IOTClient interface {
	// 在指定产品下批量自定义设备名称
	BatchCheckDeviceNames(ctx context.Context, in *BatchDeviceInfo, opts ...grpc.CallOption) (*BatchRegisterReply, error)
	// 在指定产品下批量注册多个设备
	BatchRegisterDeviceWithApplyId(ctx context.Context, in *BatchRegisterRequest, opts ...grpc.CallOption) (*BatchRegisterReply, error)
	// 查询指定产品下的所有设备列表
	GetAllDevices(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	// 从物联网平台删除设备
	DeleteDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*NullReply, error)
	// 禁用指定设备
	DisableThing(ctx context.Context, in *Device, opts ...grpc.CallOption) (*NullReply, error)
	// 启用指定设备
	EnableThing(ctx context.Context, in *Device, opts ...grpc.CallOption) (*NullReply, error)
	// 向指定topic发布消息
	Pub(ctx context.Context, in *PubRequest, opts ...grpc.CallOption) (*PubReply, error)
	// 批量查看同一产品下指定设备的运行状态
	BatchGetDeviceState(ctx context.Context, in *BatchDeviceInfo, opts ...grpc.CallOption) (*GetDeviceStatusReply, error)
	// 查询批量注册的设备信息
	QueryPageByApplyId(ctx context.Context, in *QueryPageRequest, opts ...grpc.CallOption) (*QueryPageReply, error)
	// 查询指定设备的详细信息
	QueryDeviceDetail(ctx context.Context, in *Device, opts ...grpc.CallOption) (*QueryDeviceReply, error)
	// 查看指定设备的运行状态
	GetDeviceStatus(ctx context.Context, in *Device, opts ...grpc.CallOption) (*GetSingleDeviceStatusReply, error)
}

type iOTClient struct {
	cc *grpc.ClientConn
}

func NewIOTClient(cc *grpc.ClientConn) IOTClient {
	return &iOTClient{cc}
}

func (c *iOTClient) BatchCheckDeviceNames(ctx context.Context, in *BatchDeviceInfo, opts ...grpc.CallOption) (*BatchRegisterReply, error) {
	out := new(BatchRegisterReply)
	err := c.cc.Invoke(ctx, "/iot.IOT/BatchCheckDeviceNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOTClient) BatchRegisterDeviceWithApplyId(ctx context.Context, in *BatchRegisterRequest, opts ...grpc.CallOption) (*BatchRegisterReply, error) {
	out := new(BatchRegisterReply)
	err := c.cc.Invoke(ctx, "/iot.IOT/BatchRegisterDeviceWithApplyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOTClient) GetAllDevices(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/iot.IOT/GetAllDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOTClient) DeleteDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*NullReply, error) {
	out := new(NullReply)
	err := c.cc.Invoke(ctx, "/iot.IOT/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOTClient) DisableThing(ctx context.Context, in *Device, opts ...grpc.CallOption) (*NullReply, error) {
	out := new(NullReply)
	err := c.cc.Invoke(ctx, "/iot.IOT/DisableThing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOTClient) EnableThing(ctx context.Context, in *Device, opts ...grpc.CallOption) (*NullReply, error) {
	out := new(NullReply)
	err := c.cc.Invoke(ctx, "/iot.IOT/EnableThing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOTClient) Pub(ctx context.Context, in *PubRequest, opts ...grpc.CallOption) (*PubReply, error) {
	out := new(PubReply)
	err := c.cc.Invoke(ctx, "/iot.IOT/Pub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOTClient) BatchGetDeviceState(ctx context.Context, in *BatchDeviceInfo, opts ...grpc.CallOption) (*GetDeviceStatusReply, error) {
	out := new(GetDeviceStatusReply)
	err := c.cc.Invoke(ctx, "/iot.IOT/BatchGetDeviceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOTClient) QueryPageByApplyId(ctx context.Context, in *QueryPageRequest, opts ...grpc.CallOption) (*QueryPageReply, error) {
	out := new(QueryPageReply)
	err := c.cc.Invoke(ctx, "/iot.IOT/QueryPageByApplyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOTClient) QueryDeviceDetail(ctx context.Context, in *Device, opts ...grpc.CallOption) (*QueryDeviceReply, error) {
	out := new(QueryDeviceReply)
	err := c.cc.Invoke(ctx, "/iot.IOT/QueryDeviceDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOTClient) GetDeviceStatus(ctx context.Context, in *Device, opts ...grpc.CallOption) (*GetSingleDeviceStatusReply, error) {
	out := new(GetSingleDeviceStatusReply)
	err := c.cc.Invoke(ctx, "/iot.IOT/GetDeviceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IOTServer is the server API for IOT service.
type IOTServer interface {
	// 在指定产品下批量自定义设备名称
	BatchCheckDeviceNames(context.Context, *BatchDeviceInfo) (*BatchRegisterReply, error)
	// 在指定产品下批量注册多个设备
	BatchRegisterDeviceWithApplyId(context.Context, *BatchRegisterRequest) (*BatchRegisterReply, error)
	// 查询指定产品下的所有设备列表
	GetAllDevices(context.Context, *GetRequest) (*GetReply, error)
	// 从物联网平台删除设备
	DeleteDevice(context.Context, *Device) (*NullReply, error)
	// 禁用指定设备
	DisableThing(context.Context, *Device) (*NullReply, error)
	// 启用指定设备
	EnableThing(context.Context, *Device) (*NullReply, error)
	// 向指定topic发布消息
	Pub(context.Context, *PubRequest) (*PubReply, error)
	// 批量查看同一产品下指定设备的运行状态
	BatchGetDeviceState(context.Context, *BatchDeviceInfo) (*GetDeviceStatusReply, error)
	// 查询批量注册的设备信息
	QueryPageByApplyId(context.Context, *QueryPageRequest) (*QueryPageReply, error)
	// 查询指定设备的详细信息
	QueryDeviceDetail(context.Context, *Device) (*QueryDeviceReply, error)
	// 查看指定设备的运行状态
	GetDeviceStatus(context.Context, *Device) (*GetSingleDeviceStatusReply, error)
}

func RegisterIOTServer(s *grpc.Server, srv IOTServer) {
	s.RegisterService(&_IOT_serviceDesc, srv)
}

func _IOT_BatchCheckDeviceNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServer).BatchCheckDeviceNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.IOT/BatchCheckDeviceNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServer).BatchCheckDeviceNames(ctx, req.(*BatchDeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOT_BatchRegisterDeviceWithApplyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServer).BatchRegisterDeviceWithApplyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.IOT/BatchRegisterDeviceWithApplyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServer).BatchRegisterDeviceWithApplyId(ctx, req.(*BatchRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOT_GetAllDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServer).GetAllDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.IOT/GetAllDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServer).GetAllDevices(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOT_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.IOT/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServer).DeleteDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOT_DisableThing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServer).DisableThing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.IOT/DisableThing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServer).DisableThing(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOT_EnableThing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServer).EnableThing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.IOT/EnableThing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServer).EnableThing(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOT_Pub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServer).Pub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.IOT/Pub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServer).Pub(ctx, req.(*PubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOT_BatchGetDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServer).BatchGetDeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.IOT/BatchGetDeviceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServer).BatchGetDeviceState(ctx, req.(*BatchDeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOT_QueryPageByApplyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServer).QueryPageByApplyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.IOT/QueryPageByApplyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServer).QueryPageByApplyId(ctx, req.(*QueryPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOT_QueryDeviceDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServer).QueryDeviceDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.IOT/QueryDeviceDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServer).QueryDeviceDetail(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOT_GetDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServer).GetDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.IOT/GetDeviceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServer).GetDeviceStatus(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

var _IOT_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iot.IOT",
	HandlerType: (*IOTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchCheckDeviceNames",
			Handler:    _IOT_BatchCheckDeviceNames_Handler,
		},
		{
			MethodName: "BatchRegisterDeviceWithApplyId",
			Handler:    _IOT_BatchRegisterDeviceWithApplyId_Handler,
		},
		{
			MethodName: "GetAllDevices",
			Handler:    _IOT_GetAllDevices_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _IOT_DeleteDevice_Handler,
		},
		{
			MethodName: "DisableThing",
			Handler:    _IOT_DisableThing_Handler,
		},
		{
			MethodName: "EnableThing",
			Handler:    _IOT_EnableThing_Handler,
		},
		{
			MethodName: "Pub",
			Handler:    _IOT_Pub_Handler,
		},
		{
			MethodName: "BatchGetDeviceState",
			Handler:    _IOT_BatchGetDeviceState_Handler,
		},
		{
			MethodName: "QueryPageByApplyId",
			Handler:    _IOT_QueryPageByApplyId_Handler,
		},
		{
			MethodName: "QueryDeviceDetail",
			Handler:    _IOT_QueryDeviceDetail_Handler,
		},
		{
			MethodName: "GetDeviceStatus",
			Handler:    _IOT_GetDeviceStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot.proto",
}

func init() { proto.RegisterFile("iot.proto", fileDescriptor_iot_e65ab8f8cdb7b9d3) }

var fileDescriptor_iot_e65ab8f8cdb7b9d3 = []byte{
	// 804 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcf, 0x4f, 0xdb, 0x4a,
	0x10, 0x8e, 0x49, 0xc2, 0x4b, 0x26, 0x2f, 0x04, 0x96, 0xf0, 0x5e, 0x88, 0x78, 0x3c, 0xb4, 0xfd,
	0x45, 0xab, 0x16, 0x09, 0x7a, 0x69, 0x0f, 0xad, 0x04, 0xa1, 0x04, 0xd4, 0x42, 0x83, 0x49, 0xdb,
	0xb3, 0x93, 0x0c, 0x89, 0xa9, 0xb1, 0x83, 0xbd, 0xae, 0x94, 0xfe, 0x0d, 0xbd, 0xf5, 0xd8, 0x7b,
	0x4f, 0x3d, 0xf6, 0x0f, 0xac, 0xbc, 0xbb, 0xb6, 0x77, 0x9d, 0x52, 0x90, 0x2a, 0xa1, 0xde, 0x32,
	0x9f, 0x67, 0x67, 0xbf, 0x99, 0xf9, 0x66, 0x36, 0x50, 0xb6, 0x3d, 0xb6, 0x31, 0xf6, 0x3d, 0xe6,
	0x91, 0xbc, 0xed, 0x31, 0xba, 0x0f, 0xb3, 0xbb, 0xf8, 0xc1, 0xee, 0x23, 0x59, 0x05, 0x10, 0xbf,
	0x8e, 0xac, 0x73, 0x6c, 0x18, 0x6b, 0xc6, 0x7a, 0xd9, 0x54, 0x90, 0xe8, 0x7b, 0xc7, 0xf7, 0x06,
	0x61, 0x9f, 0xbd, 0xc4, 0x49, 0x63, 0x46, 0x7c, 0x4f, 0x11, 0xfa, 0xcd, 0x88, 0x03, 0x1c, 0xb8,
	0xa7, 0x1e, 0x69, 0x42, 0x49, 0x5a, 0x03, 0x19, 0x2c, 0xb1, 0x33, 0x57, 0xcd, 0x4c, 0x5d, 0x45,
	0xe1, 0x6f, 0x61, 0x9d, 0x60, 0xdf, 0x47, 0xd6, 0xc8, 0x73, 0x0f, 0x0d, 0x23, 0x2b, 0x50, 0x6e,
	0x9f, 0xb3, 0x96, 0x8f, 0x16, 0xc3, 0x46, 0x81, 0x3b, 0xa4, 0x00, 0x59, 0x83, 0x4a, 0xfb, 0x9c,
	0x1d, 0x7a, 0x03, 0xfb, 0xd4, 0xc6, 0x41, 0xa3, 0xc8, 0xbf, 0xab, 0x10, 0x3d, 0x86, 0xda, 0x8e,
	0xc5, 0xfa, 0x23, 0x85, 0xb2, 0x9e, 0xa1, 0x91, 0xcd, 0x70, 0x8a, 0x76, 0x5e, 0xa7, 0x4d, 0xcf,
	0x00, 0xda, 0xc8, 0x4c, 0xbc, 0x08, 0x31, 0x60, 0x57, 0x46, 0x6b, 0x42, 0xa9, 0x63, 0x0d, 0xf1,
	0xc4, 0xfe, 0x18, 0x97, 0x20, 0xb1, 0x23, 0xfa, 0xad, 0xd0, 0xf7, 0xd1, 0x65, 0x11, 0x24, 0xf3,
	0x57, 0x21, 0xda, 0x81, 0x3a, 0xa7, 0x6f, 0xe2, 0xd0, 0x0e, 0x18, 0xfa, 0xd7, 0xbd, 0xb5, 0x01,
	0x7f, 0x6d, 0x8f, 0xc7, 0xce, 0xe4, 0x60, 0x20, 0x2f, 0x8d, 0x4d, 0xfa, 0xc9, 0x00, 0xe8, 0x84,
	0xbd, 0xeb, 0x06, 0xba, 0x0d, 0xd5, 0xae, 0x37, 0xb6, 0xfb, 0x7b, 0xa1, 0xe3, 0x28, 0x6d, 0xd4,
	0x41, 0x72, 0x17, 0xe6, 0x0e, 0x31, 0x08, 0xac, 0x21, 0xb6, 0x3c, 0x97, 0xa1, 0x1b, 0xf7, 0x32,
	0x83, 0x92, 0x79, 0xc8, 0x1f, 0x7b, 0x81, 0xec, 0x63, 0xf4, 0x93, 0x9e, 0xc1, 0xfc, 0x71, 0x88,
	0xfe, 0x24, 0xca, 0x36, 0xe6, 0xa4, 0x90, 0x37, 0x34, 0xf2, 0xbf, 0x59, 0xcc, 0x3b, 0x50, 0xe6,
	0x81, 0x76, 0x2d, 0x66, 0x65, 0x2f, 0x29, 0xa4, 0x15, 0xfa, 0x6a, 0x40, 0x81, 0xbb, 0xfc, 0xe9,
	0xda, 0x6e, 0x43, 0xb3, 0x8d, 0xec, 0xc4, 0x76, 0x87, 0x0e, 0xca, 0xc0, 0xcc, 0x62, 0x61, 0x60,
	0xe2, 0xd8, 0x99, 0x90, 0xfb, 0x22, 0x0b, 0xce, 0xbc, 0xb2, 0xb5, 0xb4, 0x11, 0x6d, 0x04, 0xd5,
	0x2b, 0x9a, 0x05, 0x93, 0xbb, 0xd0, 0x07, 0x30, 0x9f, 0xfd, 0x42, 0xfe, 0x81, 0x59, 0x61, 0xc9,
	0xd4, 0xa5, 0x45, 0x2f, 0xa0, 0x26, 0x8a, 0x78, 0x63, 0x3b, 0x80, 0xee, 0x25, 0x3e, 0x9c, 0xc2,
	0x95, 0x2b, 0x2c, 0xa5, 0x3e, 0xa3, 0x51, 0xff, 0x6c, 0x40, 0x89, 0x4f, 0x6e, 0x54, 0x9e, 0x15,
	0x28, 0x77, 0xb8, 0x32, 0x43, 0x97, 0xf1, 0x18, 0x55, 0x33, 0x05, 0xa6, 0x84, 0x56, 0x55, 0x84,
	0x46, 0xa0, 0x90, 0x28, 0xac, 0x6a, 0xf2, 0xdf, 0xa4, 0x0e, 0xc5, 0xae, 0xc7, 0x2c, 0x87, 0xb7,
	0xb1, 0x6a, 0x0a, 0x83, 0xdc, 0x92, 0x2d, 0x28, 0xae, 0xe5, 0xd7, 0x2b, 0x5b, 0x35, 0xa5, 0x05,
	0x4a, 0xf1, 0x9f, 0x00, 0xc9, 0x8c, 0x78, 0x44, 0x8f, 0x6a, 0xdd, 0x9b, 0xe3, 0x47, 0x13, 0xf1,
	0xca, 0x93, 0xeb, 0x50, 0xe2, 0x93, 0x2c, 0xd3, 0x91, 0xb3, 0x96, 0x34, 0x21, 0x05, 0xe8, 0x1b,
	0xa8, 0xb7, 0x91, 0x4d, 0x6b, 0xe4, 0x99, 0xde, 0xf8, 0x57, 0x76, 0x10, 0xd5, 0x22, 0x22, 0xbb,
	0x30, 0xa5, 0x17, 0x73, 0xca, 0x95, 0x7e, 0x37, 0x60, 0x4e, 0x99, 0xde, 0x9b, 0x2a, 0xeb, 0x73,
	0x4d, 0x82, 0x9c, 0xb4, 0xa8, 0x70, 0x5d, 0x29, 0x53, 0x5a, 0xe6, 0xac, 0x33, 0xdd, 0x94, 0x3b,
	0x47, 0x40, 0x82, 0xf7, 0x7f, 0x5a, 0xbd, 0xcb, 0x22, 0xfb, 0xb4, 0xd4, 0x15, 0x28, 0x1f, 0x85,
	0x8e, 0xc3, 0x7d, 0xb7, 0xbe, 0x14, 0x21, 0x7f, 0xf0, 0xba, 0x4b, 0xf6, 0x61, 0x89, 0x77, 0xae,
	0x35, 0xc2, 0xfe, 0xfb, 0x54, 0x7f, 0x01, 0x11, 0x3c, 0x32, 0xef, 0x4e, 0xf3, 0xdf, 0x14, 0xd5,
	0x7a, 0x4d, 0x73, 0xe4, 0x2d, 0xac, 0x6a, 0xb8, 0x38, 0xf5, 0xce, 0x66, 0xa3, 0x78, 0xf3, 0x2d,
	0xff, 0xec, 0x30, 0x5f, 0x97, 0xbf, 0x8a, 0xbb, 0x09, 0xd5, 0x36, 0xb2, 0x6d, 0xc7, 0x11, 0x01,
	0x03, 0x22, 0x34, 0x98, 0x3e, 0x5f, 0xcd, 0x6a, 0x0a, 0x88, 0x23, 0x8f, 0xa2, 0x61, 0x73, 0x90,
	0xc9, 0x8d, 0x42, 0x2a, 0x8a, 0x10, 0x9a, 0x42, 0x87, 0x49, 0x25, 0xa4, 0xbb, 0x1d, 0x58, 0x3d,
	0x07, 0xbb, 0x23, 0xdb, 0x1d, 0x5e, 0xe5, 0xfe, 0x10, 0x2a, 0x2f, 0xdc, 0x6b, 0x7b, 0xdf, 0x83,
	0x7c, 0x27, 0xec, 0x49, 0xd2, 0xe9, 0xa3, 0x25, 0x49, 0xc7, 0xda, 0xa7, 0x39, 0xb2, 0x0f, 0x8b,
	0x3c, 0x7f, 0x4d, 0xe4, 0x78, 0x49, 0x1f, 0x96, 0xe3, 0x94, 0xa7, 0xe6, 0x81, 0xe6, 0xc8, 0x0e,
	0x90, 0x44, 0xd1, 0x3b, 0x93, 0xb8, 0xfa, 0x62, 0x7b, 0x66, 0x1f, 0xaa, 0xe6, 0x62, 0x16, 0x16,
	0x31, 0x9e, 0xc2, 0x82, 0xa2, 0xaf, 0x5d, 0x64, 0x96, 0xed, 0xe8, 0xa9, 0x2a, 0xf1, 0x14, 0x11,
	0xd2, 0x1c, 0xd9, 0x86, 0x5a, 0x86, 0x98, 0x7e, 0xf0, 0xff, 0x98, 0xfb, 0x25, 0x5b, 0x9f, 0xe6,
	0x7a, 0xb3, 0xfc, 0x6f, 0xdf, 0xe3, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x8f, 0xa5, 0xe0,
	0x03, 0x0a, 0x00, 0x00,
}
