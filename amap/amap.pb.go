// Code generated by protoc-gen-go. DO NOT EDIT.
// source: amap.proto

package amap

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Address struct {
	Street               string   `protobuf:"bytes,1,opt,name=Street,proto3" json:"Street,omitempty"`
	City                 string   `protobuf:"bytes,2,opt,name=City,proto3" json:"City,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_amap_f2aea08d2933a536, []int{0}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (dst *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(dst, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

type Location struct {
	Count                string     `protobuf:"bytes,1,opt,name=Count,proto3" json:"Count,omitempty"`
	Geocodes             []*Geocode `protobuf:"bytes,2,rep,name=Geocodes,proto3" json:"Geocodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_amap_f2aea08d2933a536, []int{1}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (dst *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(dst, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

func (m *Location) GetGeocodes() []*Geocode {
	if m != nil {
		return m.Geocodes
	}
	return nil
}

type Geocode struct {
	Location             string   `protobuf:"bytes,1,opt,name=Location,proto3" json:"Location,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	Country              string   `protobuf:"bytes,3,opt,name=Country,proto3" json:"Country,omitempty"`
	Province             string   `protobuf:"bytes,4,opt,name=Province,proto3" json:"Province,omitempty"`
	City                 string   `protobuf:"bytes,5,opt,name=City,proto3" json:"City,omitempty"`
	District             string   `protobuf:"bytes,6,opt,name=District,proto3" json:"District,omitempty"`
	Street               string   `protobuf:"bytes,7,opt,name=Street,proto3" json:"Street,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Geocode) Reset()         { *m = Geocode{} }
func (m *Geocode) String() string { return proto.CompactTextString(m) }
func (*Geocode) ProtoMessage()    {}
func (*Geocode) Descriptor() ([]byte, []int) {
	return fileDescriptor_amap_f2aea08d2933a536, []int{2}
}
func (m *Geocode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Geocode.Unmarshal(m, b)
}
func (m *Geocode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Geocode.Marshal(b, m, deterministic)
}
func (dst *Geocode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Geocode.Merge(dst, src)
}
func (m *Geocode) XXX_Size() int {
	return xxx_messageInfo_Geocode.Size(m)
}
func (m *Geocode) XXX_DiscardUnknown() {
	xxx_messageInfo_Geocode.DiscardUnknown(m)
}

var xxx_messageInfo_Geocode proto.InternalMessageInfo

func (m *Geocode) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Geocode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Geocode) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Geocode) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *Geocode) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Geocode) GetDistrict() string {
	if m != nil {
		return m.District
	}
	return ""
}

func (m *Geocode) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func init() {
	proto.RegisterType((*Address)(nil), "amap.Address")
	proto.RegisterType((*Location)(nil), "amap.Location")
	proto.RegisterType((*Geocode)(nil), "amap.Geocode")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AmapClient is the client API for Amap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AmapClient interface {
	// 正向地理编码： 将地址描述信息转换成地理坐标（经纬度)
	ForwardGeocode(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Location, error)
}

type amapClient struct {
	cc *grpc.ClientConn
}

func NewAmapClient(cc *grpc.ClientConn) AmapClient {
	return &amapClient{cc}
}

func (c *amapClient) ForwardGeocode(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, "/amap.Amap/ForwardGeocode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AmapServer is the server API for Amap service.
type AmapServer interface {
	// 正向地理编码： 将地址描述信息转换成地理坐标（经纬度)
	ForwardGeocode(context.Context, *Address) (*Location, error)
}

func RegisterAmapServer(s *grpc.Server, srv AmapServer) {
	s.RegisterService(&_Amap_serviceDesc, srv)
}

func _Amap_ForwardGeocode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmapServer).ForwardGeocode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/amap.Amap/ForwardGeocode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmapServer).ForwardGeocode(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

var _Amap_serviceDesc = grpc.ServiceDesc{
	ServiceName: "amap.Amap",
	HandlerType: (*AmapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardGeocode",
			Handler:    _Amap_ForwardGeocode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "amap.proto",
}

func init() { proto.RegisterFile("amap.proto", fileDescriptor_amap_f2aea08d2933a536) }

var fileDescriptor_amap_f2aea08d2933a536 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x49, 0x9b, 0x26, 0xe5, 0x10, 0x1d, 0x2c, 0x84, 0x4e, 0x9d, 0xaa, 0x4c, 0x65, 0xa9,
	0x44, 0x11, 0x03, 0x63, 0x55, 0x04, 0x03, 0x0c, 0xa8, 0x3c, 0x81, 0x49, 0x3c, 0x78, 0x68, 0x2e,
	0xba, 0x18, 0x50, 0x1f, 0x8e, 0x77, 0x43, 0xb1, 0xcf, 0x4e, 0x37, 0x7f, 0x77, 0x97, 0xff, 0xfe,
	0xff, 0x02, 0xa0, 0x8f, 0xba, 0xdb, 0x74, 0x4c, 0x8e, 0x54, 0x3e, 0xbc, 0xab, 0x47, 0x28, 0x77,
	0x4d, 0xc3, 0xa6, 0xef, 0xd5, 0x2d, 0x14, 0x9f, 0x8e, 0x8d, 0x71, 0x98, 0xad, 0xb2, 0xf5, 0xe5,
	0x41, 0x48, 0x29, 0xc8, 0xf7, 0xd6, 0x9d, 0x70, 0xe2, 0xab, 0xfe, 0x5d, 0xbd, 0xc1, 0xfc, 0x9d,
	0x6a, 0xed, 0x2c, 0xb5, 0xea, 0x06, 0x66, 0x7b, 0xfa, 0x6e, 0xe3, 0x67, 0x01, 0xd4, 0x1d, 0xcc,
	0x5f, 0x0d, 0xd5, 0xd4, 0x98, 0x1e, 0x27, 0xab, 0xe9, 0xfa, 0x6a, 0x7b, 0xbd, 0xf1, 0xdb, 0xa5,
	0x7a, 0x48, 0xed, 0xea, 0x2f, 0x83, 0x52, 0x40, 0x2d, 0x47, 0x61, 0xd1, 0x1b, 0x17, 0x61, 0xf2,
	0x2a, 0x5e, 0x92, 0x75, 0x84, 0xd2, 0x6f, 0xe5, 0x13, 0x4e, 0x43, 0x47, 0x70, 0xd0, 0xfb, 0x60,
	0xfa, 0xb1, 0x6d, 0x6d, 0x30, 0x0f, 0x7a, 0x91, 0x53, 0xb0, 0xd9, 0x18, 0x6c, 0x98, 0x7f, 0xb6,
	0xbd, 0x63, 0x5b, 0x3b, 0x2c, 0xc2, 0x7c, 0xe4, 0xb3, 0x03, 0x95, 0xe7, 0x07, 0xda, 0x3e, 0x41,
	0xbe, 0x3b, 0xea, 0x4e, 0xdd, 0xc3, 0xe2, 0x85, 0xf8, 0x57, 0x73, 0x13, 0xd3, 0x48, 0x64, 0xb1,
	0xb9, 0x5c, 0x04, 0x8c, 0x81, 0xaa, 0x8b, 0xaf, 0xc2, 0xff, 0x8b, 0x87, 0xff, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xbe, 0x1c, 0x4b, 0x73, 0x99, 0x01, 0x00, 0x00,
}
