// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dns.proto

package dns

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DomainRecord struct {
	DomainName           string   `protobuf:"bytes,1,opt,name=DomainName,proto3" json:"DomainName,omitempty"`
	RecordId             string   `protobuf:"bytes,2,opt,name=RecordId,proto3" json:"RecordId,omitempty"`
	RR                   string   `protobuf:"bytes,3,opt,name=RR,proto3" json:"RR,omitempty"`
	Type                 string   `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Value                string   `protobuf:"bytes,5,opt,name=Value,proto3" json:"Value,omitempty"`
	Status               string   `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DomainRecord) Reset()         { *m = DomainRecord{} }
func (m *DomainRecord) String() string { return proto.CompactTextString(m) }
func (*DomainRecord) ProtoMessage()    {}
func (*DomainRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_5901881f957f84ef, []int{0}
}
func (m *DomainRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainRecord.Unmarshal(m, b)
}
func (m *DomainRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainRecord.Marshal(b, m, deterministic)
}
func (dst *DomainRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainRecord.Merge(dst, src)
}
func (m *DomainRecord) XXX_Size() int {
	return xxx_messageInfo_DomainRecord.Size(m)
}
func (m *DomainRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DomainRecord proto.InternalMessageInfo

func (m *DomainRecord) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *DomainRecord) GetRecordId() string {
	if m != nil {
		return m.RecordId
	}
	return ""
}

func (m *DomainRecord) GetRR() string {
	if m != nil {
		return m.RR
	}
	return ""
}

func (m *DomainRecord) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DomainRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *DomainRecord) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetRequest struct {
	DomainName           string   `protobuf:"bytes,1,opt,name=DomainName,proto3" json:"DomainName,omitempty"`
	PageNumber           string   `protobuf:"bytes,2,opt,name=PageNumber,proto3" json:"PageNumber,omitempty"`
	PageSize             string   `protobuf:"bytes,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	RR                   string   `protobuf:"bytes,4,opt,name=RR,proto3" json:"RR,omitempty"`
	Value                string   `protobuf:"bytes,5,opt,name=Value,proto3" json:"Value,omitempty"`
	Type                 string   `protobuf:"bytes,6,opt,name=Type,proto3" json:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_5901881f957f84ef, []int{1}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (dst *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(dst, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *GetRequest) GetPageNumber() string {
	if m != nil {
		return m.PageNumber
	}
	return ""
}

func (m *GetRequest) GetPageSize() string {
	if m != nil {
		return m.PageSize
	}
	return ""
}

func (m *GetRequest) GetRR() string {
	if m != nil {
		return m.RR
	}
	return ""
}

func (m *GetRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type GetReply struct {
	TotalCount           uint32          `protobuf:"varint,1,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	DomainRecord         []*DomainRecord `protobuf:"bytes,2,rep,name=domainRecord,proto3" json:"domainRecord,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetReply) Reset()         { *m = GetReply{} }
func (m *GetReply) String() string { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()    {}
func (*GetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_5901881f957f84ef, []int{2}
}
func (m *GetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReply.Unmarshal(m, b)
}
func (m *GetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReply.Marshal(b, m, deterministic)
}
func (dst *GetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReply.Merge(dst, src)
}
func (m *GetReply) XXX_Size() int {
	return xxx_messageInfo_GetReply.Size(m)
}
func (m *GetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetReply proto.InternalMessageInfo

func (m *GetReply) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *GetReply) GetDomainRecord() []*DomainRecord {
	if m != nil {
		return m.DomainRecord
	}
	return nil
}

type NullReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NullReply) Reset()         { *m = NullReply{} }
func (m *NullReply) String() string { return proto.CompactTextString(m) }
func (*NullReply) ProtoMessage()    {}
func (*NullReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_5901881f957f84ef, []int{3}
}
func (m *NullReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NullReply.Unmarshal(m, b)
}
func (m *NullReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NullReply.Marshal(b, m, deterministic)
}
func (dst *NullReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullReply.Merge(dst, src)
}
func (m *NullReply) XXX_Size() int {
	return xxx_messageInfo_NullReply.Size(m)
}
func (m *NullReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NullReply.DiscardUnknown(m)
}

var xxx_messageInfo_NullReply proto.InternalMessageInfo

type DelRequest struct {
	RecordId             string   `protobuf:"bytes,1,opt,name=RecordId,proto3" json:"RecordId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelRequest) Reset()         { *m = DelRequest{} }
func (m *DelRequest) String() string { return proto.CompactTextString(m) }
func (*DelRequest) ProtoMessage()    {}
func (*DelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_5901881f957f84ef, []int{4}
}
func (m *DelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelRequest.Unmarshal(m, b)
}
func (m *DelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelRequest.Marshal(b, m, deterministic)
}
func (dst *DelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelRequest.Merge(dst, src)
}
func (m *DelRequest) XXX_Size() int {
	return xxx_messageInfo_DelRequest.Size(m)
}
func (m *DelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelRequest proto.InternalMessageInfo

func (m *DelRequest) GetRecordId() string {
	if m != nil {
		return m.RecordId
	}
	return ""
}

type CheckReply struct {
	IsExist              bool     `protobuf:"varint,1,opt,name=IsExist,proto3" json:"IsExist,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckReply) Reset()         { *m = CheckReply{} }
func (m *CheckReply) String() string { return proto.CompactTextString(m) }
func (*CheckReply) ProtoMessage()    {}
func (*CheckReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_5901881f957f84ef, []int{5}
}
func (m *CheckReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckReply.Unmarshal(m, b)
}
func (m *CheckReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckReply.Marshal(b, m, deterministic)
}
func (dst *CheckReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckReply.Merge(dst, src)
}
func (m *CheckReply) XXX_Size() int {
	return xxx_messageInfo_CheckReply.Size(m)
}
func (m *CheckReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckReply.DiscardUnknown(m)
}

var xxx_messageInfo_CheckReply proto.InternalMessageInfo

func (m *CheckReply) GetIsExist() bool {
	if m != nil {
		return m.IsExist
	}
	return false
}

func init() {
	proto.RegisterType((*DomainRecord)(nil), "dns.DomainRecord")
	proto.RegisterType((*GetRequest)(nil), "dns.GetRequest")
	proto.RegisterType((*GetReply)(nil), "dns.GetReply")
	proto.RegisterType((*NullReply)(nil), "dns.NullReply")
	proto.RegisterType((*DelRequest)(nil), "dns.DelRequest")
	proto.RegisterType((*CheckReply)(nil), "dns.CheckReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DNSClient is the client API for DNS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DNSClient interface {
	// 分页获取域名解析列表
	GetDomainRecords(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	// 批量添加域名解析
	AddDomainRecord(ctx context.Context, in *DomainRecord, opts ...grpc.CallOption) (*DomainRecord, error)
	// 检查域名解析记录
	CheckDomainRecord(ctx context.Context, in *DomainRecord, opts ...grpc.CallOption) (*CheckReply, error)
	// 删除域名解析
	DeleteDomainRecord(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*NullReply, error)
	// 修改域名解析
	UpdateDomainRecord(ctx context.Context, in *DomainRecord, opts ...grpc.CallOption) (*NullReply, error)
	// 设置解析记录状态
	SetDomainRecordStatus(ctx context.Context, in *DomainRecord, opts ...grpc.CallOption) (*NullReply, error)
}

type dNSClient struct {
	cc *grpc.ClientConn
}

func NewDNSClient(cc *grpc.ClientConn) DNSClient {
	return &dNSClient{cc}
}

func (c *dNSClient) GetDomainRecords(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/dns.DNS/GetDomainRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) AddDomainRecord(ctx context.Context, in *DomainRecord, opts ...grpc.CallOption) (*DomainRecord, error) {
	out := new(DomainRecord)
	err := c.cc.Invoke(ctx, "/dns.DNS/AddDomainRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) CheckDomainRecord(ctx context.Context, in *DomainRecord, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/dns.DNS/CheckDomainRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) DeleteDomainRecord(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*NullReply, error) {
	out := new(NullReply)
	err := c.cc.Invoke(ctx, "/dns.DNS/DeleteDomainRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) UpdateDomainRecord(ctx context.Context, in *DomainRecord, opts ...grpc.CallOption) (*NullReply, error) {
	out := new(NullReply)
	err := c.cc.Invoke(ctx, "/dns.DNS/UpdateDomainRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) SetDomainRecordStatus(ctx context.Context, in *DomainRecord, opts ...grpc.CallOption) (*NullReply, error) {
	out := new(NullReply)
	err := c.cc.Invoke(ctx, "/dns.DNS/SetDomainRecordStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNSServer is the server API for DNS service.
type DNSServer interface {
	// 分页获取域名解析列表
	GetDomainRecords(context.Context, *GetRequest) (*GetReply, error)
	// 批量添加域名解析
	AddDomainRecord(context.Context, *DomainRecord) (*DomainRecord, error)
	// 检查域名解析记录
	CheckDomainRecord(context.Context, *DomainRecord) (*CheckReply, error)
	// 删除域名解析
	DeleteDomainRecord(context.Context, *DelRequest) (*NullReply, error)
	// 修改域名解析
	UpdateDomainRecord(context.Context, *DomainRecord) (*NullReply, error)
	// 设置解析记录状态
	SetDomainRecordStatus(context.Context, *DomainRecord) (*NullReply, error)
}

func RegisterDNSServer(s *grpc.Server, srv DNSServer) {
	s.RegisterService(&_DNS_serviceDesc, srv)
}

func _DNS_GetDomainRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).GetDomainRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns.DNS/GetDomainRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).GetDomainRecords(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_AddDomainRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).AddDomainRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns.DNS/AddDomainRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).AddDomainRecord(ctx, req.(*DomainRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_CheckDomainRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).CheckDomainRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns.DNS/CheckDomainRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).CheckDomainRecord(ctx, req.(*DomainRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_DeleteDomainRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).DeleteDomainRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns.DNS/DeleteDomainRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).DeleteDomainRecord(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_UpdateDomainRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).UpdateDomainRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns.DNS/UpdateDomainRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).UpdateDomainRecord(ctx, req.(*DomainRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_SetDomainRecordStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).SetDomainRecordStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns.DNS/SetDomainRecordStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).SetDomainRecordStatus(ctx, req.(*DomainRecord))
	}
	return interceptor(ctx, in, info, handler)
}

var _DNS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dns.DNS",
	HandlerType: (*DNSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDomainRecords",
			Handler:    _DNS_GetDomainRecords_Handler,
		},
		{
			MethodName: "AddDomainRecord",
			Handler:    _DNS_AddDomainRecord_Handler,
		},
		{
			MethodName: "CheckDomainRecord",
			Handler:    _DNS_CheckDomainRecord_Handler,
		},
		{
			MethodName: "DeleteDomainRecord",
			Handler:    _DNS_DeleteDomainRecord_Handler,
		},
		{
			MethodName: "UpdateDomainRecord",
			Handler:    _DNS_UpdateDomainRecord_Handler,
		},
		{
			MethodName: "SetDomainRecordStatus",
			Handler:    _DNS_SetDomainRecordStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dns.proto",
}

func init() { proto.RegisterFile("dns.proto", fileDescriptor_dns_5901881f957f84ef) }

var fileDescriptor_dns_5901881f957f84ef = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0xaa, 0xda, 0x40,
	0x14, 0xc6, 0x4d, 0xa2, 0xa9, 0x1e, 0xff, 0xd5, 0xa1, 0x2d, 0x43, 0x16, 0x22, 0x59, 0x14, 0x57,
	0x2e, 0x6c, 0x4b, 0x29, 0x74, 0x53, 0x4c, 0x11, 0x37, 0xa1, 0x4c, 0x6c, 0xf7, 0xa3, 0x73, 0x68,
	0xa5, 0x31, 0x49, 0xcd, 0x04, 0xea, 0x7d, 0x96, 0xbb, 0xba, 0xaf, 0x76, 0x5f, 0xe4, 0x92, 0x99,
	0x68, 0x92, 0xab, 0xe0, 0xdd, 0xf9, 0x7d, 0x9e, 0x8f, 0xf3, 0x3b, 0xe7, 0x4c, 0xa0, 0x23, 0xa2,
	0x74, 0x96, 0x1c, 0x62, 0x19, 0x13, 0x4b, 0x44, 0xa9, 0x7b, 0x6f, 0x40, 0xcf, 0x8b, 0xf7, 0x7c,
	0x17, 0x31, 0xdc, 0xc6, 0x07, 0x41, 0xc6, 0x00, 0x5a, 0xfb, 0x7c, 0x8f, 0xd4, 0x98, 0x18, 0xd3,
	0x0e, 0xab, 0x38, 0xc4, 0x81, 0xb6, 0xae, 0x5c, 0x09, 0x6a, 0xaa, 0x7f, 0xcf, 0x9a, 0x0c, 0xc0,
	0x64, 0x8c, 0x5a, 0xca, 0x35, 0x19, 0x23, 0x04, 0x9a, 0xeb, 0x63, 0x82, 0xb4, 0xa9, 0x1c, 0xf5,
	0x9b, 0xbc, 0x81, 0xd6, 0x2f, 0x1e, 0x66, 0x48, 0x5b, 0xca, 0xd4, 0x82, 0xbc, 0x03, 0x3b, 0x90,
	0x5c, 0x66, 0x29, 0xb5, 0x95, 0x5d, 0x28, 0xf7, 0xc1, 0x00, 0x58, 0xa2, 0x64, 0xf8, 0x2f, 0xc3,
	0x54, 0xde, 0x84, 0x1b, 0x03, 0xfc, 0xe0, 0xbf, 0xd1, 0xcf, 0xf6, 0x1b, 0x3c, 0x14, 0x78, 0x15,
	0x27, 0x87, 0xcf, 0x55, 0xb0, 0xbb, 0xc3, 0x02, 0xf3, 0xac, 0x0b, 0xf8, 0xe6, 0x19, 0xfe, 0x3a,
	0xe8, 0x69, 0x24, 0xbb, 0x1c, 0xc9, 0xe5, 0xd0, 0x56, 0x8c, 0x49, 0x78, 0xcc, 0x09, 0xd6, 0xb1,
	0xe4, 0xe1, 0x22, 0xce, 0x22, 0xa9, 0x08, 0xfb, 0xac, 0xe2, 0x90, 0x4f, 0xd0, 0x13, 0x95, 0x75,
	0x53, 0x73, 0x62, 0x4d, 0xbb, 0xf3, 0xd1, 0x2c, 0x3f, 0x4b, 0xf5, 0x0e, 0xac, 0x56, 0xe6, 0x76,
	0xa1, 0xe3, 0x67, 0x61, 0xa8, 0x7a, 0xb8, 0x53, 0x00, 0x0f, 0xc3, 0xd3, 0x4e, 0xaa, 0x07, 0x31,
	0xea, 0x07, 0x71, 0xdf, 0x03, 0x2c, 0xfe, 0xe0, 0xf6, 0xaf, 0x66, 0xa3, 0xf0, 0x6a, 0x95, 0x7e,
	0xff, 0xbf, 0x4b, 0x35, 0x58, 0x9b, 0x9d, 0xe4, 0xfc, 0xd1, 0x04, 0xcb, 0xf3, 0x03, 0xf2, 0x11,
	0x5e, 0x2f, 0x51, 0x56, 0x39, 0x52, 0x32, 0x54, 0x6c, 0xe5, 0x11, 0x9c, 0x7e, 0x69, 0xe4, 0x34,
	0x0d, 0xf2, 0x05, 0x86, 0xdf, 0x84, 0xa8, 0xbd, 0xa2, 0xcb, 0x81, 0x9c, 0x4b, 0x4b, 0x45, 0x47,
	0x0a, 0xf0, 0x56, 0x58, 0x43, 0x94, 0xb3, 0xb8, 0x0d, 0xf2, 0x19, 0x88, 0x87, 0x21, 0x4a, 0xac,
	0x65, 0x75, 0x61, 0xb9, 0x1e, 0x67, 0xa0, 0x8c, 0x72, 0x79, 0x79, 0x4f, 0xf2, 0x33, 0x11, 0xfc,
	0x59, 0xf0, 0x4a, 0xd3, 0xcb, 0xe8, 0x57, 0x78, 0x1b, 0xd4, 0xf7, 0xa3, 0xdf, 0xe9, 0x8b, 0xd2,
	0x1b, 0x5b, 0x7d, 0x77, 0x1f, 0x9e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x04, 0xa3, 0xeb, 0x43, 0x84,
	0x03, 0x00, 0x00,
}
